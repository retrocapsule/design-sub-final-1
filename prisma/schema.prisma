generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(cuid())
  name                 String?
  email                String?         @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 String          @default("USER")
  onboardingStep       String?         @default("profile")
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  stripeCustomerId     String?         @unique
  subscriptionId       String?         @unique
  subscriptionStatus   String?
  onboardingCompleted  Boolean         @default(false)
  passwordResetExpires DateTime?
  passwordResetToken   String?         @unique
  accounts             Account[]
  comments             Comment[]
  assignedTo           DesignRequest[] @relation("AssignedTo")
  designRequests       DesignRequest[]
  files                File[]
  receivedMessages     Message[]       @relation("ReceivedMessages")
  sentMessages         Message[]       @relation("SentMessages")
  payments             Payment[]
  sessions             Session[]
  subscription         Subscription?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DesignRequest {
  id           String        @id @default(cuid())
  title        String
  description  String
  status       String        @default("PENDING")
  priority     String
  projectType  String
  fileFormat   String
  dimensions   String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  assignedToId String?
  comments     Comment[]
  deliverables Deliverable[]
  assignedTo   User?         @relation("AssignedTo", fields: [assignedToId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  files        File[]
  messages     Message[]

  @@index([userId])
  @@index([assignedToId])
}

model Comment {
  id              String        @id @default(cuid())
  content         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  designRequestId String
  designRequest   DesignRequest @relation(fields: [designRequestId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([designRequestId])
}

model File {
  id              String        @id @default(cuid())
  name            String
  url             String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  designRequestId String
  designRequest   DesignRequest @relation(fields: [designRequestId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([designRequestId])
}

model CaseStudy {
  id          String   @id @default(cuid())
  title       String
  category    String
  image       String
  features    Json
  metrics     Json
  testimonial Json
  process     Json
  gallery     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  title       String
  category    String
  image       String
  description String
  features    Json
  tools       Json
  timeline    String
  results     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Package {
  id              String   @id @default(cuid())
  name            String
  description     String?
  price           Float
  originalPrice   Float?
  features        Json
  isActive        Boolean  @default(true)
  stripePriceId   String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  subscriptions   Subscription[]
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  packageId            String
  status               String
  stripePriceId        String?
  stripeSubscriptionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  package              Package  @relation(fields: [packageId], references: [id])
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id              String        @id @default(cuid())
  content         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  recipientId     String?
  designRequestId String
  isFromAdmin     Boolean       @default(false)
  isRead          Boolean       @default(false)
  designRequest   DesignRequest @relation(fields: [designRequestId], references: [id])
  recipient       User?         @relation("ReceivedMessages", fields: [recipientId], references: [id])
  user            User          @relation("SentMessages", fields: [userId], references: [id])

  @@index([userId])
  @@index([recipientId])
  @@index([designRequestId])
}

model Deliverable {
  id              String        @id @default(cuid())
  title           String
  description     String
  status          String        @default("PENDING")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  designRequestId String
  feedback        String?
  designRequest   DesignRequest @relation(fields: [designRequestId], references: [id])

  @@index([designRequestId])
}

model DesignTemplate {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String
  icon               String
  projectType        String
  fileFormat         String
  dimensions         String
  defaultDescription String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Payment {
  id              String   @id @default(cuid())
  amount          Int
  currency        String   @default("usd")
  status          String
  paymentIntentId String?  @unique
  userId          String
  description     String?
  metadata        Json?
  refundedAmount  Int?
  creditAmount    Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
